#!/usr/bin/env node
const app = require('../app'),
    admin = require('../adminApp'),
    debug = require('debug')('eReader-service:appServer'),
    http = require('http'),
    mongoose = require('mongoose');

/***************************************************************************
 *  data base                                                               *
 ***************************************************************************/
mongoose.connect('mongodb://localhost/eReader', function (err) {
    if (err) {
        console.log('database connection error', err);
    } else {
        console.log('database connection successful');
    }
});

/***************************************************************************
 *  app                                                               *
 ***************************************************************************/
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var appServer = http.createServer(app);
appServer.listen(port);
appServer.on('error', onError);
appServer.on('listening', onListeningAppServer);

/***************************************************************************
 *  admin                                                               *
 ***************************************************************************/
const adminPort = normalizePort(process.env.PORT || '3001');
admin.set('port', adminPort);
const adminServer = http.createServer(admin);
adminServer.listen(adminPort);
adminServer.on('error', onError);
adminServer.on('listening', onListeningAdminServer);


function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListeningAppServer() {
    var addr = appServer.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('App listening on ' + bind);
}

function onListeningAdminServer() {
    var addr = adminServer.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Admin listening on ' + bind);
}